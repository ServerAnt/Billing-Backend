# Generated by Django 3.2.16 on 2023-01-05 00:19

import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
from django.db import migrations, models

import waldur_core.core.fields
import waldur_core.core.models
import waldur_core.core.validators
import waldur_core.structure.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("structure", "0001_squashed_0036"),
    ]

    operations = [
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                (
                    "guest_os",
                    models.CharField(
                        help_text="Defines the valid guest operating system types used for configuring a virtual machine",
                        max_length=50,
                    ),
                ),
                (
                    "cores",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Number of cores in a VM"
                    ),
                ),
                (
                    "cores_per_socket",
                    models.PositiveSmallIntegerField(
                        default=1, help_text="Number of cores per socket in a VM"
                    ),
                ),
                (
                    "ram",
                    models.PositiveIntegerField(
                        default=0, help_text="Memory size in MiB", verbose_name="RAM"
                    ),
                ),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField()),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
                (
                    "disk",
                    models.PositiveIntegerField(
                        default=0, help_text="Disk size in MiB"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(waldur_core.core.models.BackendModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Cluster",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("settings", "backend_id")},
            },
            bases=(waldur_core.core.models.BackendModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CustomerCluster",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cluster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.cluster",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.customer",
                    ),
                ),
            ],
            options={
                "unique_together": {("customer", "cluster")},
            },
        ),
        migrations.CreateModel(
            name="Network",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                ("type", models.CharField(max_length=255)),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("settings", "backend_id")},
            },
            bases=(waldur_core.core.models.BackendModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CustomerNetwork",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.customer",
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.network",
                    ),
                ),
            ],
            options={
                "unique_together": {("customer", "network")},
            },
        ),
        migrations.CreateModel(
            name="Datastore",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                ("type", models.CharField(max_length=255)),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        blank=True, help_text="Capacity, in MB.", null=True
                    ),
                ),
                (
                    "free_space",
                    models.PositiveIntegerField(
                        blank=True, help_text="Available space, in MB.", null=True
                    ),
                ),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("settings", "backend_id")},
            },
            bases=(waldur_core.core.models.BackendModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CustomerDatastore",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.customer",
                    ),
                ),
                (
                    "datastore",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.datastore",
                    ),
                ),
            ],
            options={
                "unique_together": {("customer", "datastore")},
            },
        ),
        migrations.CreateModel(
            name="Folder",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("settings", "backend_id")},
            },
            bases=(waldur_core.core.models.BackendModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="VirtualMachine",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "runtime_state",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="runtime state"
                    ),
                ),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                (
                    "guest_os",
                    models.CharField(
                        help_text="Defines the valid guest operating system types used for configuring a virtual machine",
                        max_length=50,
                    ),
                ),
                (
                    "cores",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Number of cores in a VM"
                    ),
                ),
                (
                    "cores_per_socket",
                    models.PositiveSmallIntegerField(
                        default=1, help_text="Number of cores per socket in a VM"
                    ),
                ),
                (
                    "ram",
                    models.PositiveIntegerField(
                        default=0, help_text="Memory size in MiB", verbose_name="RAM"
                    ),
                ),
                (
                    "disk",
                    models.PositiveIntegerField(
                        default=0, help_text="Disk size in MiB"
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="waldur_vmware.template",
                    ),
                ),
                (
                    "cluster",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="waldur_vmware.cluster",
                    ),
                ),
                (
                    "networks",
                    models.ManyToManyField(blank=True, to="waldur_vmware.Network"),
                ),
                (
                    "datastore",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="waldur_vmware.datastore",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="waldur_vmware.folder",
                    ),
                ),
                (
                    "guest_power_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Flag indicating if the virtual machine is ready to process soft power operations.",
                    ),
                ),
                (
                    "guest_power_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("RUNNING", "Running"),
                            ("SHUTTING_DOWN", "Shutting down"),
                            ("RESETTING", "Resetting"),
                            ("STANDBY", "Standby"),
                            ("NOT_RUNNING", "Not running"),
                            ("UNAVAILABLE", "Unavailable"),
                        ],
                        max_length=150,
                        verbose_name="The power state of the guest operating system.",
                    ),
                ),
                (
                    "tools_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("STARTING", "Starting"),
                            ("RUNNING", "Running"),
                            ("NOT_RUNNING", "Not running"),
                        ],
                        max_length=50,
                        verbose_name="Current running status of VMware Tools running in the guest operating system.",
                    ),
                ),
                ("tools_installed", models.BooleanField(default=False)),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.core.models.BackendModelMixin,
                waldur_core.structure.models.StructureLoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CustomerFolder",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.customer",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.folder",
                    ),
                ),
            ],
            options={
                "unique_together": {("customer", "folder")},
            },
        ),
        migrations.CreateModel(
            name="CustomerNetworkPair",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.customer",
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.network",
                    ),
                ),
            ],
            options={
                "unique_together": {("customer", "network")},
            },
        ),
        migrations.CreateModel(
            name="Disk",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                ("size", models.PositiveIntegerField(help_text="Size in MiB")),
                (
                    "vm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disks",
                        to="waldur_vmware.virtualmachine",
                    ),
                ),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "ordering": ["-created"],
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.core.models.BackendModelMixin,
                waldur_core.structure.models.StructureLoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Port",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                (
                    "mac_address",
                    models.CharField(
                        blank=True, max_length=32, verbose_name="MAC address"
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.network",
                    ),
                ),
                (
                    "vm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="waldur_vmware.virtualmachine",
                    ),
                ),
                (
                    "runtime_state",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="runtime state"
                    ),
                ),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.core.models.BackendModelMixin,
                waldur_core.structure.models.StructureLoggableMixin,
                models.Model,
            ),
        ),
    ]
