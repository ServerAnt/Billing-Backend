# Generated by Django 3.2.16 on 2022-12-19 23:24

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import model_utils.fields
from django.db import migrations, models

import waldur_core.core.fields
import waldur_core.core.models
import waldur_core.core.validators
import waldur_core.logging.loggers
import waldur_core.structure.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("quotas", "0001_squashed_0004"),
        ("structure", "0001_squashed_0036"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "runtime_state",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="runtime state"
                    ),
                ),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255, null=True)),
                ("internal_network_id", models.CharField(blank=True, max_length=64)),
                ("external_network_id", models.CharField(blank=True, max_length=64)),
                (
                    "availability_zone",
                    models.CharField(
                        blank=True,
                        help_text="Optional availability group. Will be used for all instances provisioned in this tenant",
                        max_length=100,
                    ),
                ),
                ("user_username", models.CharField(blank=True, max_length=50)),
                ("user_password", models.CharField(blank=True, max_length=50)),
                (
                    "default_volume_type_name",
                    models.CharField(
                        blank=True,
                        help_text="Volume type name to use when creating volumes.",
                        max_length=100,
                    ),
                ),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("service_settings", "backend_id")},
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.logging.loggers.LoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                (
                    "min_disk",
                    models.PositiveIntegerField(
                        default=0, help_text="Minimum disk size in MiB"
                    ),
                ),
                (
                    "min_ram",
                    models.PositiveIntegerField(
                        default=0, help_text="Minimum memory size in MiB"
                    ),
                ),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("settings", "backend_id")},
            },
        ),
        migrations.CreateModel(
            name="Network",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "runtime_state",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="runtime state"
                    ),
                ),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                ("is_external", models.BooleanField(default=False)),
                ("type", models.CharField(blank=True, max_length=50)),
                ("segmentation_id", models.IntegerField(null=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        to="openstack.tenant",
                    ),
                ),
                (
                    "mtu",
                    models.IntegerField(
                        help_text="The maximum transmission unit (MTU) value to address fragmentation.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(68),
                            django.core.validators.MaxValueValidator(9000),
                        ],
                    ),
                ),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.logging.loggers.LoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CustomerOpenStack",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "external_network_id",
                    models.CharField(
                        max_length=255, verbose_name="OpenStack external network ID"
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.customer",
                    ),
                ),
                (
                    "settings",
                    models.ForeignKey(
                        limit_choices_to={"shared": True, "type": "OpenStack"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization OpenStack settings",
                "verbose_name_plural": "Organization OpenStack settings",
                "unique_together": {("settings", "customer")},
            },
        ),
        migrations.CreateModel(
            name="VolumeType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("settings", "backend_id")},
            },
            bases=(waldur_core.core.models.BackendModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SecurityGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="security_groups",
                        to="openstack.tenant",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Port",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                ("mac_address", models.CharField(blank=True, max_length=32)),
                (
                    "allowed_address_pairs",
                    waldur_core.core.fields.JSONField(
                        default=list,
                        help_text="A server can send a packet with source address which matches one of the specified allowed address pairs.",
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ports",
                        to="openstack.network",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ports",
                        to="openstack.tenant",
                    ),
                ),
                (
                    "fixed_ips",
                    waldur_core.core.fields.JSONField(
                        default=list,
                        help_text="A list of tuples (ip_address, subnet_id), where ip_address can be both IPv4 and IPv6 and subnet_id is a backend id of the subnet",
                    ),
                ),
                ("device_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "device_owner",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
                ("port_security_enabled", models.BooleanField(default=True)),
                (
                    "security_groups",
                    models.ManyToManyField(
                        related_name="ports", to="openstack.SecurityGroup"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.core.models.BackendModelMixin,
                waldur_core.structure.models.StructureLoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Router",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routers",
                        to="openstack.tenant",
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("error_traceback", models.TextField(blank=True)),
                ("routes", waldur_core.core.fields.JSONField(default=list)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("fixed_ips", waldur_core.core.fields.JSONField(default=list)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.core.models.BackendModelMixin,
                waldur_core.structure.models.StructureLoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SubNet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                ("cidr", models.CharField(blank=True, max_length=32)),
                (
                    "gateway_ip",
                    models.GenericIPAddressField(null=True, protocol="IPv4"),
                ),
                ("allocation_pools", waldur_core.core.fields.JSONField(default=dict)),
                ("ip_version", models.SmallIntegerField(default=4)),
                ("enable_dhcp", models.BooleanField(default=True)),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subnets",
                        to="openstack.network",
                    ),
                ),
                (
                    "dns_nameservers",
                    waldur_core.core.fields.JSONField(
                        default=list,
                        help_text="List of DNS name servers associated with the subnet.",
                    ),
                ),
                ("disable_gateway", models.BooleanField(default=False)),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "host_routes",
                    waldur_core.core.fields.JSONField(
                        default=list,
                        help_text="List of additional routes for the subnet.",
                    ),
                ),
                (
                    "is_connected",
                    models.BooleanField(
                        default=True,
                        help_text="Is subnet connected to the default tenant router.",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name": "Subnet",
                "verbose_name_plural": "Subnets",
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.logging.loggers.LoggableMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="FloatingIP",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                (
                    "address",
                    models.GenericIPAddressField(
                        blank=True, default=None, null=True, protocol="IPv4"
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                (
                    "backend_network_id",
                    models.CharField(editable=False, max_length=255),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="floating_ips",
                        to="openstack.tenant",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                (
                    "runtime_state",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="runtime state"
                    ),
                ),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "port",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="floating_ips",
                        to="openstack.port",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name": "Floating IP",
                "verbose_name_plural": "Floating IPs",
                "unique_together": {("tenant", "address")},
            },
        ),
        migrations.CreateModel(
            name="SecurityGroupRule",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        blank=True,
                        choices=[("tcp", "tcp"), ("udp", "udp"), ("icmp", "icmp")],
                        max_length=40,
                    ),
                ),
                (
                    "from_port",
                    models.IntegerField(
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(65535)],
                    ),
                ),
                (
                    "to_port",
                    models.IntegerField(
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(65535)],
                    ),
                ),
                ("cidr", models.CharField(blank=True, max_length=255, null=True)),
                ("backend_id", models.CharField(blank=True, max_length=36)),
                (
                    "security_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="openstack.securitygroup",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("ingress", "ingress"), ("egress", "egress")],
                        default="ingress",
                        max_length=8,
                    ),
                ),
                (
                    "ethertype",
                    models.CharField(
                        choices=[("IPv4", "IPv4"), ("IPv6", "IPv6")],
                        default="IPv4",
                        max_length=40,
                    ),
                ),
                (
                    "remote_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="openstack.securitygroup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServerGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2000, verbose_name="description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("error_message", models.TextField(blank=True)),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
                ("backend_id", models.CharField(blank=True, max_length=255)),
                (
                    "policy",
                    models.CharField(
                        blank=True, choices=[("affinity", "Affinity")], max_length=40
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.project",
                    ),
                ),
                (
                    "service_settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="server_groups",
                        to="openstack.tenant",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                waldur_core.core.models.DescendantMixin,
                waldur_core.core.models.BackendModelMixin,
                waldur_core.structure.models.StructureLoggableMixin,
                models.Model,
                django_fsm.ConcurrentTransitionMixin,
            ),
        ),
        migrations.CreateModel(
            name="Flavor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("backend_id", models.CharField(db_index=True, max_length=255)),
                (
                    "cores",
                    models.PositiveSmallIntegerField(
                        help_text="Number of cores in a VM"
                    ),
                ),
                ("ram", models.PositiveIntegerField(help_text="Memory size in MiB")),
                (
                    "disk",
                    models.PositiveIntegerField(help_text="Root disk size in MiB"),
                ),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="structure.servicesettings",
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("error_traceback", models.TextField(blank=True)),
                (
                    "state",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (5, "Creation Scheduled"),
                            (6, "Creating"),
                            (1, "Update Scheduled"),
                            (2, "Updating"),
                            (7, "Deletion Scheduled"),
                            (8, "Deleting"),
                            (3, "OK"),
                            (4, "Erred"),
                        ],
                        default=5,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": set(),
            },
            bases=(waldur_core.logging.loggers.LoggableMixin, models.Model),
        ),
    ]
